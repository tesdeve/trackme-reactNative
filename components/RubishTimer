  ////////////////////////////////////////////////////////////////////////////////////

                    Second Try
  /////////////////////////////////////////////////////////////////////////////////////////


import React, { useState , useEffect }  from 'react';
import { StyleSheet,Text} from 'react-native';
import moment from 'moment'
import { StartStopContext } from '../MyContext'


export default function Timer(counterStartTrip) {
let [seconds, setSeconds] = useState(0);
let [isActive, setIsActive] = useState(false);

  function toggle() {
    setIsActive(!isActive);
  }
//
// setCountReset = () => {
//   setSeconds(0);
//   setIsActive(false);
// }

  useEffect(() => {
    let interval = null;
    if (isActive) {
      interval = setInterval(() => {
        setSeconds(seconds => seconds + 1);
        console.log(seconds)
      }, 1000);
      
    } else if (!isActive && seconds !== 0) {
      clearInterval(interval);
      console.log(seconds)
    }
    return () => clearInterval(interval);
  }, [isActive, seconds]);


 


  //  const duration = moment.duration(count)  /* {interval} */
  //  const centiseconds = Math.floor(duration.milliseconds()/10)

  return(
     <StartStopContext.Consumer>  
       { counterStartTrip => { 
             const duration = moment.duration(seconds)  /* {interval} */
             const centiseconds = Math.floor(duration.milliseconds()/10)
         //const [start, setStart] = useState(0)
         //const timer = now -start
         //const duration = moment.duration(timer)  /* {interval} */
         //const centiseconds = Math.floor(duration.milliseconds()/10)
         
         

          return( 
            

            <Text style={styles.timer}> {seconds} </Text> 
              /* {duration.minutes()}:
              {duration.seconds()}:
              {centiseconds}         */
            // </Text> 
          )          
        }}
    </StartStopContext.Consumer>
    )
}

const styles = StyleSheet.create({
  timer: {
    color: 'green',
    fontSize: 40,
    fontWeight: '200',
    marginVertical: 40,
  },
})










  ////////////////////////////////////////////////////////////////////////////////////

                        ORIGINAL
  /////////////////////////////////////////////////////////////////////////////////////////


import React, { useState , useEffect }  from 'react';
import { StyleSheet,Text} from 'react-native';
import moment from 'moment'
import { StartStopContext } from '../MyContext'
import { set } from 'react-native-reanimated';

function Timer() {

let  [now, setNow] = useState(0)
let [start, setStart] = useState(0)
let timer = now -start
const setTimer = () => {
  0
}


function count(startstrip){
 
  if (startstrip.toggleBase == false){
    now = new Date().getTime()
    start = now
   // setStart(now)
    //alert(now + '- Positivo')
    timer = setInterval(() => {
      setTimer({ now: new Date().getTime() })}, 100)
  } else {
    alert( true)
    //return(true)
  }
}




    const duration = moment.duration(timer)  /* {interval} */
    const centiseconds = Math.floor(duration.milliseconds()/10)

  return(
     <StartStopContext.Consumer>  
       { startstrip => { 
         //const [start, setStart] = useState(0)
         //const timer = now -start
         //const duration = moment.duration(timer)  /* {interval} */
         //const centiseconds = Math.floor(duration.milliseconds()/10)
          count(startstrip)
          return( 
            <Text style={styles.timer}> 
              {duration.minutes()}:
              {duration.seconds()}:
              {centiseconds}        
            </Text> 
          )          
        }
      }
    </StartStopContext.Consumer>
    )
}

const styles = StyleSheet.create({
  timer: {
    color: 'green',
    fontSize: 40,
    fontWeight: '200',
    marginVertical: 40,
  },
})


export default Timer



