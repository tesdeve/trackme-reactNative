///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2do works with 3ro of Rubbish Timer
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import React, { useState, useEffect }  from 'react';
import moment from 'moment'

const StartStopContext = React.createContext();

const StartStopProvider = (props) => {
  let [ toggleBase, setToggleBase ] =  useState(false) 
 
  const [ textValue , setTextValue ] =  useState("Start Trip ") 
  let  [count, setCount] =  useState(0) // counter
  let  [now, setNow] =  useState(0) // Runs all the time so it is the current time
  let  [start, setStart] =  useState(0) // counter
 

  let interval = null;
  const timerController = () => {
    interval = setInterval(() => {
      setCount(count => count + 1);
      console.log("INTERVAL: " + interval)
    }, 1000)
  }

  useEffect(() => {
    console.log( "TOGGLEBASE in USEEFFECT is: " + toggleBase)
    if (toggleBase) {
      timerController()
    } else if (!toggleBase && count !== 0) {
      clearInterval(interval);
    }
    return () => clearInterval(interval);
  }, [toggleBase]);

    return (
      <StartStopContext.Provider
        value={{
          toggleBase,
          textValue,
          now,
          start,
          count, 
          interval, 
          setToggleBase,
          setTextValue,
          setCount,
          setNow,
          setStart,
          timerController,
        
        }} 
      >        
        {props.children}
      </StartStopContext.Provider>

    )
  }

export { StartStopProvider, StartStopContext };

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import React, { useState }  from 'react';
import moment from 'moment'

const StartStopContext = React.createContext();

const StartStopProvider = (props) => {
  const [ toggleBase, setToggleBase ] =  useState(false) 
 
  const [ textValue , setTextValue ] =  useState("Start Trip ") 

  const  [count, setCount] =  useState(0) // counter

  let  [now, setNow] =  useState(0) // Runs all the time so it is the current time
  let  [start, setStart] =  useState(0) // counter

  return (
      <StartStopContext.Provider
        value={{
          toggleBase,
          textValue,
          //seconds,
          now,
          start,
          count, 
          setToggleBase,
          setTextValue,
         // setSeconds,
          setCount,
          setNow,
          setStart,
        }} 
      >        
        {props.children}
      </StartStopContext.Provider>

    )
  }

export { StartStopProvider, StartStopContext };